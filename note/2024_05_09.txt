item의 속성
-order           item의 순서를 결정
-flex-grow       item의 증가 너비 비율을 설정
-flex-shrink     item의 감소 너비 비율을 설정
-flex0-basis     item의 (공간 배분 전)기본 너비 설정
-flex            flex-grow, flex-shrink, flex-basis의 단축 속성
-align-self      교차 축에 item 정렬 방법을 설정

position
- static : 기본적인 위치 지정 방식, 문서의 기본적인 흐름을 따른다.
    ㄴ 모든 태그들은 처음에 position : static 상태이다.
    ㄴ left, top, right, bottom 값이 적용되지 않는다.
    ㄴ 차례대로 왼쪽에서 오른쪽, 위에서 아래로 쌓인다.
- relative : static과 유사하나 원래 위치에서 주어진 값만큼 이동한다
    ㄴ top, right, bottom, left 속성을 사용해 위치 조절이 가능하다
    ex) relative 속성에서 top : 5px을 주면 아래로 5px을 이동한다.
- absolute : 기본 흐름을 따르지 않고, 부모 요소의 상대적 위치로 지정된다.
    ㄴ 부모 요소의 포지션이 relative, absolute, fixed인 태그가 있다면 부모 요소의 기준으로 움직인다.
    ㄴ 부모 요소의 포지션이 static이라면 body 태그를 기준으로 배치된다.
    ㄴ 부모 요소가 없다면 포지션 문서의 body를 기준으로 배치된다.
- fixed : 화면의 스크롤이나 움직임에 관계없이 화면의 특정 부분에 고정되는 포지션이다.

JavaScript
- html과 css로 만들어진 웹페이지를 동적으로 만들어주는 프로그래밍 언어

Html에서 JavaScript를 사용하는 법
<script> ~ </script>

<header>에 있는 <script>
- Html 문서가 파싱되는 동안 로드되며, 이는 페이지의 렌더링을 차단할 수도 있다.
- 스크립트가 로드되기 전까지는 다른 리소스들이 로딩되지 않는다.
- 자원 초기화 및 설정 : 보통 이곳에는 웹 페이지의 초기화 및 설정과 관련된 스크립트를 넣는다.

<body>에 있는 <script>
- 페이지의 렌더링이 진행되는 중에 로드되기 때문에 페이지의 다른 내용들은 먼저 로드되고 렌더링된다.
- 동적 작업 및 이벤트 처리 : 보통 이곳에는 동적으로 생성되는 컨텐츠나 이벤트 처리와 관련된 스크립트를 위치시킨다.

초기화 할때는 head에 나머지는 body에 추가하는 것이 일반적이다.

var, let, const의 차이
- 스코프(범위)
    ㄴ 식별자(변수명, 함수명, 클래스명 등)의 유효 범위를 말한다.
    ㄴ 전역에 선언된 전역 변수는 하위 모든 곳에서 참조가 가능하다.
    ㄴ 지역에 선언된 지역 변수는 해당 지역과 하위 지역에서만 참조가 가능하다.
    ㄴ var는 함수에서만 지역 변수가 되는 함수 레벨 스코프를 가지고 있다.
- let, const의 경우에는 블록 레벨 스코프를 가져 코드 블록에서 지역 변수가 된다.

호이스팅
- 자바스크립트 엔진은 소스 코드를 한 줄씩 읽으며 순차적으로 실행하기 전에 변수 선언을 포함한 모든 선언문을 찾아서 먼저 실행한다.
- 마치 함수안의 선언들을 모두 끌어올려 해당 함수 유효 범위 최상단에 선언된 것과 같은 특징을 갖는다.
- 모든 식별자(변수, 함수, 클래스 등)는 호이스팅 되어 먼저 선언된다.

변수에 저장할 수 있는 자료형
- 문자형(String) : let 변수명 = "사용할 문자나 숫자"

- 숫자형(Number) : let 변수명 = 숫자; or Number("문자와 숫자");

- 논리형(Boolean) : let 변수명 = true, false or Boolean(데이터);
    ㄴ false로 판단되는 것들 : false, 0, null, "", undefined

- null : 변수의 값이 비어있다는 것을 표시할 경우

- undefined : 변수가 선언 되었을 때 값이 지정되지 않았을 경우
        ㄴ 변수를 선언하면 기본값은 undefined이다.

객체(Object)        

연산자
- 산술 연산자
    ㄴ +, -, *, /, %
- 문자 결합 연산자
    ㄴ 여러 개의 문자를 하나의 문자형 데이터로 결합할 때 사용
- 대입 연산자(=)
    ㄴ 연산된 데이터를 변수에 저장할 때 사용
- 복합 대입 연산자
    ㄴ +=, -=, *=, /=, %=
- 증감 연산자
    ㄴ 숫자를 1씩 증가시키거나 감소시키는 연산자
    ㄴ ++, --
- 전위 연산, 후위 연산
    ㄴ ex) ++a, a++, --a, a--
- 비교 연산자
    ㄴ <, >, >=, <=
    ㄴ a == b   같다        데이터의 일치 여부만 체크 ex) 10 == '10' -> true
    ㄴ a != b   같지 않다   데이터의 일치 여부만 체크 ex) 10 != '10' -> false
    ㄴ a === b  같다        데이터 + 타입까지 일치여부를 확인 ex) 10 === '10' -> false
    ㄴ a !== b  같지 않다   데이터 + 타입까지 일치여부를 확인 ex) 10 !== '10' -> true 
- 논리 연산자
    ㄴ ||       OR 연산자, 둘 중 하나라도 true면 true
    ㄴ &&       AND 연산자, 둘 다 true여야 true
    ㄴ !        NOT 연산자, true를 false로 false를 true로 바꿈?
- 삼항 연산자
    ㄴ 조건식 ? 조건식이 참일 때 실행할 문장 또는 값 : 조건식이 거짓일 때 실행할 문장 또는 값

조건문
- if문
    ㄴ if(조건식) {
            실행할 문장;
       } 
    ㄴ if(조건식) {
            실행할 문장;
       }
       else {
            실행할 문장;
       } 
    ㄴ if(조건식) {
            실행할 문장;
       } 
       else if(조건식) {
            실행할 문장;
       }
       else {
            실행할 문장;
       }
- switch문
    ㄴ switch(조건식) {
            case 값1 :
                코드;
                break;
            case 값1 :
                코드;
                break;
            case 값1 :
                코드;
                break;
            case 값1 :
                코드;
                break;
            default :
                코드;
                break;
       }
- 반복문
- for문
    ㄴ for(let i = 1; i <= 10; i++) {
            반복할 문장;
       }

